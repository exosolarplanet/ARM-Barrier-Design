
DA2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ffc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d0  080041d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041d8  080041d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  080041ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080041ec  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc03  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b63  00000000  00000000  0002dc3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  0002f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d60  00000000  00000000  000305f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020061  00000000  00000000  00031350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e6d  00000000  00000000  000513b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5898  00000000  00000000  0005b21e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120ab6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc4  00000000  00000000  00120b34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004170 	.word	0x08004170

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004170 	.word	0x08004170

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 f938 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 f80d 	bl	80004fc <HAL_InitTick>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	e001      	b.n	80004f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ee:	f003 fc8d 	bl	8003e0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <HAL_InitTick+0x68>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d022      	beq.n	8000556 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_InitTick+0x6c>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_InitTick+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000520:	fbb2 f3f3 	udiv	r3, r2, r3
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f946 	bl	80007b6 <HAL_SYSTICK_Config>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10f      	bne.n	8000550 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b0f      	cmp	r3, #15
 8000534:	d809      	bhi.n	800054a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000536:	2200      	movs	r2, #0
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	f04f 30ff 	mov.w	r0, #4294967295
 800053e:	f000 f910 	bl	8000762 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_InitTick+0x70>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	e007      	b.n	800055a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e004      	b.n	800055a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e001      	b.n	800055a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000004 	.word	0x20000004
 8000568:	20000008 	.word	0x20000008
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_IncTick+0x1c>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_IncTick+0x20>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4413      	add	r3, r2
 800057e:	4a03      	ldr	r2, [pc, #12]	; (800058c <HAL_IncTick+0x1c>)
 8000580:	6013      	str	r3, [r2, #0]
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	20000028 	.word	0x20000028
 8000590:	20000004 	.word	0x20000004

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000718:	d301      	bcc.n	800071e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2301      	movs	r3, #1
 800071c:	e00f      	b.n	800073e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <SysTick_Config+0x40>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000726:	210f      	movs	r1, #15
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f7ff ff8e 	bl	800064c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Config+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SysTick_Config+0x40>)
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff29 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000774:	f7ff ff3e 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000778:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	f7ff ff8e 	bl	80006a0 <NVIC_EncodePriority>
 8000784:	4602      	mov	r2, r0
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5d 	bl	800064c <__NVIC_SetPriority>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff31 	bl	8000610 <__NVIC_EnableIRQ>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffa2 	bl	8000708 <SysTick_Config>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007de:	e148      	b.n	8000a72 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	2101      	movs	r1, #1
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	fa01 f303 	lsl.w	r3, r1, r3
 80007ec:	4013      	ands	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f000 813a 	beq.w	8000a6c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d00b      	beq.n	8000818 <HAL_GPIO_Init+0x48>
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d007      	beq.n	8000818 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800080c:	2b11      	cmp	r3, #17
 800080e:	d003      	beq.n	8000818 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2b12      	cmp	r3, #18
 8000816:	d130      	bne.n	800087a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	2203      	movs	r2, #3
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	4013      	ands	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	68da      	ldr	r2, [r3, #12]
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	4313      	orrs	r3, r2
 8000840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800084e:	2201      	movs	r2, #1
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	4013      	ands	r3, r2
 800085c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	091b      	lsrs	r3, r3, #4
 8000864:	f003 0201 	and.w	r2, r3, #1
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4313      	orrs	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	2203      	movs	r2, #3
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4013      	ands	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d003      	beq.n	80008ba <HAL_GPIO_Init+0xea>
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2b12      	cmp	r3, #18
 80008b8:	d123      	bne.n	8000902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	08da      	lsrs	r2, r3, #3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3208      	adds	r2, #8
 80008c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	220f      	movs	r2, #15
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	4013      	ands	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	691a      	ldr	r2, [r3, #16]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	f003 0307 	and.w	r3, r3, #7
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	08da      	lsrs	r2, r3, #3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3208      	adds	r2, #8
 80008fc:	6939      	ldr	r1, [r7, #16]
 80008fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f003 0203 	and.w	r2, r3, #3
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	2b00      	cmp	r3, #0
 8000940:	f000 8094 	beq.w	8000a6c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	4b52      	ldr	r3, [pc, #328]	; (8000a90 <HAL_GPIO_Init+0x2c0>)
 8000946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000948:	4a51      	ldr	r2, [pc, #324]	; (8000a90 <HAL_GPIO_Init+0x2c0>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6613      	str	r3, [r2, #96]	; 0x60
 8000950:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <HAL_GPIO_Init+0x2c0>)
 8000952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800095c:	4a4d      	ldr	r2, [pc, #308]	; (8000a94 <HAL_GPIO_Init+0x2c4>)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3302      	adds	r3, #2
 8000964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f003 0303 	and.w	r3, r3, #3
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	220f      	movs	r2, #15
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000986:	d00d      	beq.n	80009a4 <HAL_GPIO_Init+0x1d4>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a43      	ldr	r2, [pc, #268]	; (8000a98 <HAL_GPIO_Init+0x2c8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d007      	beq.n	80009a0 <HAL_GPIO_Init+0x1d0>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a42      	ldr	r2, [pc, #264]	; (8000a9c <HAL_GPIO_Init+0x2cc>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d101      	bne.n	800099c <HAL_GPIO_Init+0x1cc>
 8000998:	2302      	movs	r3, #2
 800099a:	e004      	b.n	80009a6 <HAL_GPIO_Init+0x1d6>
 800099c:	2307      	movs	r3, #7
 800099e:	e002      	b.n	80009a6 <HAL_GPIO_Init+0x1d6>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e000      	b.n	80009a6 <HAL_GPIO_Init+0x1d6>
 80009a4:	2300      	movs	r3, #0
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	f002 0203 	and.w	r2, r2, #3
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	4093      	lsls	r3, r2
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009b6:	4937      	ldr	r1, [pc, #220]	; (8000a94 <HAL_GPIO_Init+0x2c4>)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009c4:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <HAL_GPIO_Init+0x2d0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	43db      	mvns	r3, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80009e8:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <HAL_GPIO_Init+0x2d0>)
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80009ee:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <HAL_GPIO_Init+0x2d0>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <HAL_GPIO_Init+0x2d0>)
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a18:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <HAL_GPIO_Init+0x2d0>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d003      	beq.n	8000a3c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a3c:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <HAL_GPIO_Init+0x2d0>)
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_GPIO_Init+0x2d0>)
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_GPIO_Init+0x2d0>)
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f47f aeaf 	bne.w	80007e0 <HAL_GPIO_Init+0x10>
  }
}
 8000a82:	bf00      	nop
 8000a84:	371c      	adds	r7, #28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010000 	.word	0x40010000
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	48000800 	.word	0x48000800
 8000aa0:	40010400 	.word	0x40010400

08000aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	807b      	strh	r3, [r7, #2]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ab4:	787b      	ldrb	r3, [r7, #1]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aba:	887a      	ldrh	r2, [r7, #2]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ac0:	e002      	b.n	8000ac8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ac2:	887a      	ldrh	r2, [r7, #2]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	695a      	ldr	r2, [r3, #20]
 8000ae4:	887b      	ldrh	r3, [r7, #2]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000aec:	887a      	ldrh	r2, [r7, #2]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000af2:	e002      	b.n	8000afa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000af4:	887a      	ldrh	r2, [r7, #2]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	619a      	str	r2, [r3, #24]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d006      	beq.n	8000b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 f90e 	bl	8003d48 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40007000 	.word	0x40007000

08000b58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40007000 	.word	0x40007000

08000b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b82:	d130      	bne.n	8000be6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b90:	d038      	beq.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b9a:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2232      	movs	r2, #50	; 0x32
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	0c9b      	lsrs	r3, r3, #18
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bb8:	e002      	b.n	8000bc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bcc:	d102      	bne.n	8000bd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1f2      	bne.n	8000bba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be0:	d110      	bne.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e00f      	b.n	8000c06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bf2:	d007      	beq.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bfc:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40007000 	.word	0x40007000
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	431bde83 	.word	0x431bde83

08000c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f000 bc11 	b.w	8001456 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c34:	4ba0      	ldr	r3, [pc, #640]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f003 030c 	and.w	r3, r3, #12
 8000c3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c3e:	4b9e      	ldr	r3, [pc, #632]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 80e4 	beq.w	8000e1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d007      	beq.n	8000c6c <HAL_RCC_OscConfig+0x4c>
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2b0c      	cmp	r3, #12
 8000c60:	f040 808b 	bne.w	8000d7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	f040 8087 	bne.w	8000d7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c6c:	4b92      	ldr	r3, [pc, #584]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d005      	beq.n	8000c84 <HAL_RCC_OscConfig+0x64>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e3e8      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a1a      	ldr	r2, [r3, #32]
 8000c88:	4b8b      	ldr	r3, [pc, #556]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d004      	beq.n	8000c9e <HAL_RCC_OscConfig+0x7e>
 8000c94:	4b88      	ldr	r3, [pc, #544]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c9c:	e005      	b.n	8000caa <HAL_RCC_OscConfig+0x8a>
 8000c9e:	4b86      	ldr	r3, [pc, #536]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d223      	bcs.n	8000cf6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fd78 	bl	80017a8 <RCC_SetFlashLatencyFromMSIRange>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e3c9      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cc2:	4b7d      	ldr	r3, [pc, #500]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a7c      	ldr	r2, [pc, #496]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	4b7a      	ldr	r3, [pc, #488]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a1b      	ldr	r3, [r3, #32]
 8000cda:	4977      	ldr	r1, [pc, #476]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ce0:	4b75      	ldr	r3, [pc, #468]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	021b      	lsls	r3, r3, #8
 8000cee:	4972      	ldr	r1, [pc, #456]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]
 8000cf4:	e025      	b.n	8000d42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cf6:	4b70      	ldr	r3, [pc, #448]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a6f      	ldr	r2, [pc, #444]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b6d      	ldr	r3, [pc, #436]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	496a      	ldr	r1, [pc, #424]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d14:	4b68      	ldr	r3, [pc, #416]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	4965      	ldr	r1, [pc, #404]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fd38 	bl	80017a8 <RCC_SetFlashLatencyFromMSIRange>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e389      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d42:	f000 fc6f 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 8000d46:	4601      	mov	r1, r0
 8000d48:	4b5b      	ldr	r3, [pc, #364]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	4a5a      	ldr	r2, [pc, #360]	; (8000ebc <HAL_RCC_OscConfig+0x29c>)
 8000d54:	5cd3      	ldrb	r3, [r2, r3]
 8000d56:	f003 031f 	and.w	r3, r3, #31
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	4a58      	ldr	r2, [pc, #352]	; (8000ec0 <HAL_RCC_OscConfig+0x2a0>)
 8000d60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d62:	4b58      	ldr	r3, [pc, #352]	; (8000ec4 <HAL_RCC_OscConfig+0x2a4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fbc8 	bl	80004fc <HAL_InitTick>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d052      	beq.n	8000e1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	e36d      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d032      	beq.n	8000de8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d82:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a4c      	ldr	r2, [pc, #304]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fc01 	bl	8000594 <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d96:	f7ff fbfd 	bl	8000594 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e356      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000da8:	4b43      	ldr	r3, [pc, #268]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f0      	beq.n	8000d96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db4:	4b40      	ldr	r3, [pc, #256]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a3f      	ldr	r2, [pc, #252]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	493a      	ldr	r1, [pc, #232]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd2:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	4935      	ldr	r1, [pc, #212]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	604b      	str	r3, [r1, #4]
 8000de6:	e01a      	b.n	8000e1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000de8:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a32      	ldr	r2, [pc, #200]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fbce 	bl	8000594 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fbca 	bl	8000594 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e323      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f0      	bne.n	8000dfc <HAL_RCC_OscConfig+0x1dc>
 8000e1a:	e000      	b.n	8000e1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d073      	beq.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d005      	beq.n	8000e3c <HAL_RCC_OscConfig+0x21c>
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2b0c      	cmp	r3, #12
 8000e34:	d10e      	bne.n	8000e54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d10b      	bne.n	8000e54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d063      	beq.n	8000f10 <HAL_RCC_OscConfig+0x2f0>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d15f      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e300      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5c:	d106      	bne.n	8000e6c <HAL_RCC_OscConfig+0x24c>
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a15      	ldr	r2, [pc, #84]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e01d      	b.n	8000ea8 <HAL_RCC_OscConfig+0x288>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x270>
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e00b      	b.n	8000ea8 <HAL_RCC_OscConfig+0x288>
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <HAL_RCC_OscConfig+0x298>)
 8000ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d01b      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fb70 	bl	8000594 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eb6:	e010      	b.n	8000eda <HAL_RCC_OscConfig+0x2ba>
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	08004188 	.word	0x08004188
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fb64 	bl	8000594 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e2bd      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eda:	4baf      	ldr	r3, [pc, #700]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x2a8>
 8000ee6:	e014      	b.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fb54 	bl	8000594 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fb50 	bl	8000594 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e2a9      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f02:	4ba5      	ldr	r3, [pc, #660]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2d0>
 8000f0e:	e000      	b.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d060      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d005      	beq.n	8000f30 <HAL_RCC_OscConfig+0x310>
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2b0c      	cmp	r3, #12
 8000f28:	d119      	bne.n	8000f5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d116      	bne.n	8000f5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f30:	4b99      	ldr	r3, [pc, #612]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_OscConfig+0x328>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e286      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f48:	4b93      	ldr	r3, [pc, #588]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	061b      	lsls	r3, r3, #24
 8000f56:	4990      	ldr	r1, [pc, #576]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f5c:	e040      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d023      	beq.n	8000fae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f66:	4b8c      	ldr	r3, [pc, #560]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a8b      	ldr	r2, [pc, #556]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f72:	f7ff fb0f 	bl	8000594 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fb0b 	bl	8000594 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e264      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f8c:	4b82      	ldr	r3, [pc, #520]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b7f      	ldr	r3, [pc, #508]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	061b      	lsls	r3, r3, #24
 8000fa6:	497c      	ldr	r1, [pc, #496]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
 8000fac:	e018      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fae:	4b7a      	ldr	r3, [pc, #488]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a79      	ldr	r2, [pc, #484]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fba:	f7ff faeb 	bl	8000594 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fae7 	bl	8000594 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e240      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fd4:	4b70      	ldr	r3, [pc, #448]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d03c      	beq.n	8001066 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d01c      	beq.n	800102e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff4:	4b68      	ldr	r3, [pc, #416]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ffa:	4a67      	ldr	r2, [pc, #412]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001004:	f7ff fac6 	bl	8000594 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100c:	f7ff fac2 	bl	8000594 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e21b      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800101e:	4b5e      	ldr	r3, [pc, #376]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8001020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0ef      	beq.n	800100c <HAL_RCC_OscConfig+0x3ec>
 800102c:	e01b      	b.n	8001066 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102e:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8001030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001034:	4a58      	ldr	r2, [pc, #352]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103e:	f7ff faa9 	bl	8000594 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001046:	f7ff faa5 	bl	8000594 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e1fe      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001058:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 800105a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1ef      	bne.n	8001046 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 80a6 	beq.w	80011c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001078:	4b47      	ldr	r3, [pc, #284]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10d      	bne.n	80010a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	4b44      	ldr	r3, [pc, #272]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	4a43      	ldr	r2, [pc, #268]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6593      	str	r3, [r2, #88]	; 0x58
 8001090:	4b41      	ldr	r3, [pc, #260]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109c:	2301      	movs	r3, #1
 800109e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a0:	4b3e      	ldr	r3, [pc, #248]	; (800119c <HAL_RCC_OscConfig+0x57c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d118      	bne.n	80010de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ac:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_RCC_OscConfig+0x57c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a3a      	ldr	r2, [pc, #232]	; (800119c <HAL_RCC_OscConfig+0x57c>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b8:	f7ff fa6c 	bl	8000594 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c0:	f7ff fa68 	bl	8000594 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e1c1      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <HAL_RCC_OscConfig+0x57c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f0      	beq.n	80010c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4d8>
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 80010e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ec:	4a2a      	ldr	r2, [pc, #168]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010f6:	e024      	b.n	8001142 <HAL_RCC_OscConfig+0x522>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d110      	bne.n	8001122 <HAL_RCC_OscConfig+0x502>
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8001102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001106:	4a24      	ldr	r2, [pc, #144]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8001112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001120:	e00f      	b.n	8001142 <HAL_RCC_OscConfig+0x522>
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8001124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 800112a:	f023 0301 	bic.w	r3, r3, #1
 800112e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 8001134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 800113a:	f023 0304 	bic.w	r3, r3, #4
 800113e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d016      	beq.n	8001178 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114a:	f7ff fa23 	bl	8000594 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001150:	e00a      	b.n	8001168 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001152:	f7ff fa1f 	bl	8000594 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001160:	4293      	cmp	r3, r2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e176      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_RCC_OscConfig+0x578>)
 800116a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0ed      	beq.n	8001152 <HAL_RCC_OscConfig+0x532>
 8001176:	e01a      	b.n	80011ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001178:	f7ff fa0c 	bl	8000594 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800117e:	e00f      	b.n	80011a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001180:	f7ff fa08 	bl	8000594 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	f241 3288 	movw	r2, #5000	; 0x1388
 800118e:	4293      	cmp	r3, r2
 8001190:	d906      	bls.n	80011a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e15f      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a0:	4baa      	ldr	r3, [pc, #680]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80011a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1e8      	bne.n	8001180 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b4:	4ba5      	ldr	r3, [pc, #660]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80011b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b8:	4aa4      	ldr	r2, [pc, #656]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80011ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0320 	and.w	r3, r3, #32
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d03c      	beq.n	8001246 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01c      	beq.n	800120e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011d4:	4b9d      	ldr	r3, [pc, #628]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80011d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011da:	4a9c      	ldr	r2, [pc, #624]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff f9d6 	bl	8000594 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011ec:	f7ff f9d2 	bl	8000594 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e12b      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011fe:	4b93      	ldr	r3, [pc, #588]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0ef      	beq.n	80011ec <HAL_RCC_OscConfig+0x5cc>
 800120c:	e01b      	b.n	8001246 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800120e:	4b8f      	ldr	r3, [pc, #572]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001214:	4a8d      	ldr	r2, [pc, #564]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121e:	f7ff f9b9 	bl	8000594 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001226:	f7ff f9b5 	bl	8000594 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e10e      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001238:	4b84      	ldr	r3, [pc, #528]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 800123a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1ef      	bne.n	8001226 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8102 	beq.w	8001454 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	2b02      	cmp	r3, #2
 8001256:	f040 80c5 	bne.w	80013e4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800125a:	4b7c      	ldr	r3, [pc, #496]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f003 0203 	and.w	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	429a      	cmp	r2, r3
 800126c:	d12c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	3b01      	subs	r3, #1
 800127a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800127c:	429a      	cmp	r2, r3
 800127e:	d123      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800128c:	429a      	cmp	r2, r3
 800128e:	d11b      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800129c:	429a      	cmp	r2, r3
 800129e:	d113      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012aa:	085b      	lsrs	r3, r3, #1
 80012ac:	3b01      	subs	r3, #1
 80012ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d109      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	3b01      	subs	r3, #1
 80012c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d067      	beq.n	8001398 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2b0c      	cmp	r3, #12
 80012cc:	d062      	beq.n	8001394 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012ce:	4b5f      	ldr	r3, [pc, #380]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e0bb      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012de:	4b5b      	ldr	r3, [pc, #364]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a5a      	ldr	r2, [pc, #360]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80012e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012ea:	f7ff f953 	bl	8000594 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff f94f 	bl	8000594 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e0a8      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001304:	4b51      	ldr	r3, [pc, #324]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f0      	bne.n	80012f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001310:	4b4e      	ldr	r3, [pc, #312]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <HAL_RCC_OscConfig+0x830>)
 8001316:	4013      	ands	r3, r2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001320:	3a01      	subs	r2, #1
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	4311      	orrs	r1, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800132a:	0212      	lsls	r2, r2, #8
 800132c:	4311      	orrs	r1, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001332:	0852      	lsrs	r2, r2, #1
 8001334:	3a01      	subs	r2, #1
 8001336:	0552      	lsls	r2, r2, #21
 8001338:	4311      	orrs	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800133e:	0852      	lsrs	r2, r2, #1
 8001340:	3a01      	subs	r2, #1
 8001342:	0652      	lsls	r2, r2, #25
 8001344:	4311      	orrs	r1, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800134a:	06d2      	lsls	r2, r2, #27
 800134c:	430a      	orrs	r2, r1
 800134e:	493f      	ldr	r1, [pc, #252]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001350:	4313      	orrs	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a3c      	ldr	r2, [pc, #240]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 800135a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001360:	4b3a      	ldr	r3, [pc, #232]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4a39      	ldr	r2, [pc, #228]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800136c:	f7ff f912 	bl	8000594 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff f90e 	bl	8000594 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e067      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001392:	e05f      	b.n	8001454 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e05e      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d157      	bne.n	8001454 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a28      	ldr	r2, [pc, #160]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80013aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4a25      	ldr	r2, [pc, #148]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80013b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013bc:	f7ff f8ea 	bl	8000594 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff f8e6 	bl	8000594 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e03f      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x7a4>
 80013e2:	e037      	b.n	8001454 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d02d      	beq.n	8001446 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80013f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013f4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d105      	bne.n	800140e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	4a11      	ldr	r2, [pc, #68]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001408:	f023 0303 	bic.w	r3, r3, #3
 800140c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 8001414:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff f8b9 	bl	8000594 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001426:	f7ff f8b5 	bl	8000594 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e00e      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_RCC_OscConfig+0x82c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f0      	bne.n	8001426 <HAL_RCC_OscConfig+0x806>
 8001444:	e006      	b.n	8001454 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e005      	b.n	8001456 <HAL_RCC_OscConfig+0x836>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop

08001460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0c8      	b.n	8001606 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001474:	4b66      	ldr	r3, [pc, #408]	; (8001610 <HAL_RCC_ClockConfig+0x1b0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d910      	bls.n	80014a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <HAL_RCC_ClockConfig+0x1b0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 0207 	bic.w	r2, r3, #7
 800148a:	4961      	ldr	r1, [pc, #388]	; (8001610 <HAL_RCC_ClockConfig+0x1b0>)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b5f      	ldr	r3, [pc, #380]	; (8001610 <HAL_RCC_ClockConfig+0x1b0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0b0      	b.n	8001606 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d04c      	beq.n	800154a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d107      	bne.n	80014c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b8:	4b56      	ldr	r3, [pc, #344]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d121      	bne.n	8001508 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e09e      	b.n	8001606 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d107      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d0:	4b50      	ldr	r3, [pc, #320]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d115      	bne.n	8001508 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e092      	b.n	8001606 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d107      	bne.n	80014f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014e8:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e086      	b.n	8001606 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f8:	4b46      	ldr	r3, [pc, #280]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e07e      	b.n	8001606 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001508:	4b42      	ldr	r3, [pc, #264]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f023 0203 	bic.w	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	493f      	ldr	r1, [pc, #252]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800151a:	f7ff f83b 	bl	8000594 <HAL_GetTick>
 800151e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001520:	e00a      	b.n	8001538 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001522:	f7ff f837 	bl	8000594 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e066      	b.n	8001606 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 020c 	and.w	r2, r3, #12
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	429a      	cmp	r2, r3
 8001548:	d1eb      	bne.n	8001522 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d008      	beq.n	8001568 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001556:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	492c      	ldr	r1, [pc, #176]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <HAL_RCC_ClockConfig+0x1b0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d210      	bcs.n	8001598 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_RCC_ClockConfig+0x1b0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0207 	bic.w	r2, r3, #7
 800157e:	4924      	ldr	r1, [pc, #144]	; (8001610 <HAL_RCC_ClockConfig+0x1b0>)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_RCC_ClockConfig+0x1b0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e036      	b.n	8001606 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4918      	ldr	r1, [pc, #96]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4910      	ldr	r1, [pc, #64]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015d6:	f000 f825 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80015da:	4601      	mov	r1, r0
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_RCC_ClockConfig+0x1b4>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 80015e8:	5cd3      	ldrb	r3, [r2, r3]
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	fa21 f303 	lsr.w	r3, r1, r3
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff7e 	bl	80004fc <HAL_InitTick>
 8001600:	4603      	mov	r3, r0
 8001602:	72fb      	strb	r3, [r7, #11]

  return status;
 8001604:	7afb      	ldrb	r3, [r7, #11]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40022000 	.word	0x40022000
 8001614:	40021000 	.word	0x40021000
 8001618:	08004188 	.word	0x08004188
 800161c:	20000008 	.word	0x20000008
 8001620:	20000000 	.word	0x20000000

08001624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <HAL_RCC_GetSysClockFreq+0x104>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800163c:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <HAL_RCC_GetSysClockFreq+0x104>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x34>
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d121      	bne.n	8001696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d11e      	bne.n	8001696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <HAL_RCC_GetSysClockFreq+0x104>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001664:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_RCC_GetSysClockFreq+0x104>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e005      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <HAL_RCC_GetSysClockFreq+0x104>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001680:	4a2a      	ldr	r2, [pc, #168]	; (800172c <HAL_RCC_GetSysClockFreq+0x108>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10d      	bne.n	80016ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d102      	bne.n	80016a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_RCC_GetSysClockFreq+0x10c>)
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	e004      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <HAL_RCC_GetSysClockFreq+0x110>)
 80016aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	d133      	bne.n	800171a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_RCC_GetSysClockFreq+0x104>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d002      	beq.n	80016c8 <HAL_RCC_GetSysClockFreq+0xa4>
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d003      	beq.n	80016ce <HAL_RCC_GetSysClockFreq+0xaa>
 80016c6:	e005      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016ca:	617b      	str	r3, [r7, #20]
      break;
 80016cc:	e005      	b.n	80016da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_RCC_GetSysClockFreq+0x110>)
 80016d0:	617b      	str	r3, [r7, #20]
      break;
 80016d2:	e002      	b.n	80016da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	617b      	str	r3, [r7, #20]
      break;
 80016d8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_RCC_GetSysClockFreq+0x104>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	3301      	adds	r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_RCC_GetSysClockFreq+0x104>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_GetSysClockFreq+0x104>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0e5b      	lsrs	r3, r3, #25
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	3301      	adds	r3, #1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	fbb2 f3f3 	udiv	r3, r2, r3
 8001718:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800171a:	69bb      	ldr	r3, [r7, #24]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3724      	adds	r7, #36	; 0x24
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000
 800172c:	080041a0 	.word	0x080041a0
 8001730:	00f42400 	.word	0x00f42400
 8001734:	007a1200 	.word	0x007a1200

08001738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_RCC_GetHCLKFreq+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008

08001750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001754:	f7ff fff0 	bl	8001738 <HAL_RCC_GetHCLKFreq>
 8001758:	4601      	mov	r1, r0
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001766:	5cd3      	ldrb	r3, [r2, r3]
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000
 8001778:	08004198 	.word	0x08004198

0800177c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001780:	f7ff ffda 	bl	8001738 <HAL_RCC_GetHCLKFreq>
 8001784:	4601      	mov	r1, r0
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	0adb      	lsrs	r3, r3, #11
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001792:	5cd3      	ldrb	r3, [r2, r3]
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	fa21 f303 	lsr.w	r3, r1, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	08004198 	.word	0x08004198

080017a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017b4:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017c0:	f7ff f9ca 	bl	8000b58 <HAL_PWREx_GetVoltageRange>
 80017c4:	6178      	str	r0, [r7, #20]
 80017c6:	e014      	b.n	80017f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	4a24      	ldr	r2, [pc, #144]	; (8001860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6593      	str	r3, [r2, #88]	; 0x58
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017e0:	f7ff f9ba 	bl	8000b58 <HAL_PWREx_GetVoltageRange>
 80017e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f8:	d10b      	bne.n	8001812 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b80      	cmp	r3, #128	; 0x80
 80017fe:	d919      	bls.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2ba0      	cmp	r3, #160	; 0xa0
 8001804:	d902      	bls.n	800180c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001806:	2302      	movs	r3, #2
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	e013      	b.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800180c:	2301      	movs	r3, #1
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	e010      	b.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b80      	cmp	r3, #128	; 0x80
 8001816:	d902      	bls.n	800181e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001818:	2303      	movs	r3, #3
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	e00a      	b.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b80      	cmp	r3, #128	; 0x80
 8001822:	d102      	bne.n	800182a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	e004      	b.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b70      	cmp	r3, #112	; 0x70
 800182e:	d101      	bne.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001830:	2301      	movs	r3, #1
 8001832:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 0207 	bic.w	r2, r3, #7
 800183c:	4909      	ldr	r1, [pc, #36]	; (8001864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	40022000 	.word	0x40022000

08001868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001870:	2300      	movs	r3, #0
 8001872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001874:	2300      	movs	r3, #0
 8001876:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001880:	2b00      	cmp	r3, #0
 8001882:	d02f      	beq.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800188c:	d005      	beq.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800188e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001892:	d015      	beq.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001894:	2b00      	cmp	r3, #0
 8001896:	d007      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001898:	e00f      	b.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800189a:	4bac      	ldr	r3, [pc, #688]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4aab      	ldr	r2, [pc, #684]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80018a6:	e00c      	b.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f9dc 	bl	8001c6c <RCCEx_PLLSAI1_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80018b8:	e003      	b.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	74fb      	strb	r3, [r7, #19]
      break;
 80018be:	e000      	b.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80018c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80018c2:	7cfb      	ldrb	r3, [r7, #19]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10b      	bne.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018c8:	4ba0      	ldr	r3, [pc, #640]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d6:	499d      	ldr	r1, [pc, #628]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80018de:	e001      	b.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80018e0:	7cfb      	ldrb	r3, [r7, #19]
 80018e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8099 	beq.w	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018f6:	4b95      	ldr	r3, [pc, #596]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001906:	2300      	movs	r3, #0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00d      	beq.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	4b8f      	ldr	r3, [pc, #572]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	4a8e      	ldr	r2, [pc, #568]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001916:	6593      	str	r3, [r2, #88]	; 0x58
 8001918:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001924:	2301      	movs	r3, #1
 8001926:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001928:	4b89      	ldr	r3, [pc, #548]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a88      	ldr	r2, [pc, #544]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800192e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001934:	f7fe fe2e 	bl	8000594 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800193a:	e009      	b.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193c:	f7fe fe2a 	bl	8000594 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d902      	bls.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	74fb      	strb	r3, [r7, #19]
        break;
 800194e:	e005      	b.n	800195c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001950:	4b7f      	ldr	r3, [pc, #508]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ef      	beq.n	800193c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800195c:	7cfb      	ldrb	r3, [r7, #19]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d155      	bne.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001962:	4b7a      	ldr	r3, [pc, #488]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800196c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01e      	beq.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	429a      	cmp	r2, r3
 800197c:	d019      	beq.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800197e:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001988:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800198a:	4b70      	ldr	r3, [pc, #448]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001990:	4a6e      	ldr	r2, [pc, #440]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800199a:	4b6c      	ldr	r3, [pc, #432]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800199c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a0:	4a6a      	ldr	r2, [pc, #424]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80019aa:	4a68      	ldr	r2, [pc, #416]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d016      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7fe fdea 	bl	8000594 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c2:	e00b      	b.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c4:	f7fe fde6 	bl	8000594 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d902      	bls.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	74fb      	strb	r3, [r7, #19]
            break;
 80019da:	e006      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019dc:	4b5b      	ldr	r3, [pc, #364]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0ec      	beq.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80019ea:	7cfb      	ldrb	r3, [r7, #19]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10b      	bne.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019f0:	4b56      	ldr	r3, [pc, #344]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fe:	4953      	ldr	r1, [pc, #332]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001a06:	e004      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001a08:	7cfb      	ldrb	r3, [r7, #19]
 8001a0a:	74bb      	strb	r3, [r7, #18]
 8001a0c:	e001      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a0e:	7cfb      	ldrb	r3, [r7, #19]
 8001a10:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a12:	7c7b      	ldrb	r3, [r7, #17]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a18:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	4a4b      	ldr	r2, [pc, #300]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00a      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a30:	4b46      	ldr	r3, [pc, #280]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4943      	ldr	r1, [pc, #268]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00a      	beq.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a52:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a58:	f023 020c 	bic.w	r2, r3, #12
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	493a      	ldr	r1, [pc, #232]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00a      	beq.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	4932      	ldr	r1, [pc, #200]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00a      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	4929      	ldr	r1, [pc, #164]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00a      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ab8:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac6:	4921      	ldr	r1, [pc, #132]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00a      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	4918      	ldr	r1, [pc, #96]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00a      	beq.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4910      	ldr	r1, [pc, #64]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d02c      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	4907      	ldr	r1, [pc, #28]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b3c:	d10a      	bne.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b3e:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	4a02      	ldr	r2, [pc, #8]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b48:	60d3      	str	r3, [r2, #12]
 8001b4a:	e015      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2101      	movs	r1, #1
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f881 	bl	8001c6c <RCCEx_PLLSAI1_Config>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001b6e:	7cfb      	ldrb	r3, [r7, #19]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8001b74:	7cfb      	ldrb	r3, [r7, #19]
 8001b76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d028      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001b84:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	492d      	ldr	r1, [pc, #180]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bae:	60d3      	str	r3, [r2, #12]
 8001bb0:	e011      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bba:	d10c      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f852 	bl	8001c6c <RCCEx_PLLSAI1_Config>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001bcc:	7cfb      	ldrb	r3, [r7, #19]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8001bd2:	7cfb      	ldrb	r3, [r7, #19]
 8001bd4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d01c      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf0:	4915      	ldr	r1, [pc, #84]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2102      	movs	r1, #2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 f82f 	bl	8001c6c <RCCEx_PLLSAI1_Config>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c12:	7cfb      	ldrb	r3, [r7, #19]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8001c18:	7cfb      	ldrb	r3, [r7, #19]
 8001c1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00a      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	4904      	ldr	r1, [pc, #16]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001c3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000

08001c4c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000

08001c6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001c7a:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d018      	beq.n	8001cb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001c86:	4b70      	ldr	r3, [pc, #448]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 0203 	and.w	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d10d      	bne.n	8001cb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
       ||
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001c9e:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
       ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d044      	beq.n	8001d3c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e041      	b.n	8001d3c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d00c      	beq.n	8001cda <RCCEx_PLLSAI1_Config+0x6e>
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d013      	beq.n	8001cec <RCCEx_PLLSAI1_Config+0x80>
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d120      	bne.n	8001d0a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001cc8:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d11d      	bne.n	8001d10 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cd8:	e01a      	b.n	8001d10 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001cda:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d116      	bne.n	8001d14 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cea:	e013      	b.n	8001d14 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001cec:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10f      	bne.n	8001d18 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001cf8:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001d08:	e006      	b.n	8001d18 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d0e:	e004      	b.n	8001d1a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001d10:	bf00      	nop
 8001d12:	e002      	b.n	8001d1a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001d14:	bf00      	nop
 8001d16:	e000      	b.n	8001d1a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001d18:	bf00      	nop
    }

    if(status == HAL_OK)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10d      	bne.n	8001d3c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001d20:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	430b      	orrs	r3, r1
 8001d36:	4944      	ldr	r1, [pc, #272]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d17c      	bne.n	8001e3c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a40      	ldr	r2, [pc, #256]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d4e:	f7fe fc21 	bl	8000594 <HAL_GetTick>
 8001d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001d54:	e009      	b.n	8001d6a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d56:	f7fe fc1d 	bl	8000594 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d902      	bls.n	8001d6a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	73fb      	strb	r3, [r7, #15]
        break;
 8001d68:	e005      	b.n	8001d76 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ef      	bne.n	8001d56 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d15f      	bne.n	8001e3c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d110      	bne.n	8001da4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001d8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6892      	ldr	r2, [r2, #8]
 8001d92:	0211      	lsls	r1, r2, #8
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	68d2      	ldr	r2, [r2, #12]
 8001d98:	06d2      	lsls	r2, r2, #27
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	492a      	ldr	r1, [pc, #168]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	610b      	str	r3, [r1, #16]
 8001da2:	e027      	b.n	8001df4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d112      	bne.n	8001dd0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001daa:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001db2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6892      	ldr	r2, [r2, #8]
 8001dba:	0211      	lsls	r1, r2, #8
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6912      	ldr	r2, [r2, #16]
 8001dc0:	0852      	lsrs	r2, r2, #1
 8001dc2:	3a01      	subs	r2, #1
 8001dc4:	0552      	lsls	r2, r2, #21
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	491f      	ldr	r1, [pc, #124]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	610b      	str	r3, [r1, #16]
 8001dce:	e011      	b.n	8001df4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001dd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6892      	ldr	r2, [r2, #8]
 8001de0:	0211      	lsls	r1, r2, #8
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6952      	ldr	r2, [r2, #20]
 8001de6:	0852      	lsrs	r2, r2, #1
 8001de8:	3a01      	subs	r2, #1
 8001dea:	0652      	lsls	r2, r2, #25
 8001dec:	430a      	orrs	r2, r1
 8001dee:	4916      	ldr	r1, [pc, #88]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7fe fbc8 	bl	8000594 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001e06:	e009      	b.n	8001e1c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e08:	f7fe fbc4 	bl	8000594 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d902      	bls.n	8001e1c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	73fb      	strb	r3, [r7, #15]
          break;
 8001e1a:	e005      	b.n	8001e28 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ef      	beq.n	8001e08 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	4904      	ldr	r1, [pc, #16]	; (8001e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000

08001e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e01d      	b.n	8001e9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f001 ffee 	bl	8003e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3304      	adds	r3, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f000 fbf8 	bl	8002680 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2202      	movs	r2, #2
 8001eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6a1a      	ldr	r2, [r3, #32]
 8001eb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10f      	bne.n	8001ee2 <HAL_TIM_Base_Stop+0x40>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a1a      	ldr	r2, [r3, #32]
 8001ec8:	f240 4344 	movw	r3, #1092	; 0x444
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d107      	bne.n	8001ee2 <HAL_TIM_Base_Stop+0x40>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_TIM_Base_Start_IT+0x50>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d00b      	beq.n	8001f3a <HAL_TIM_Base_Start_IT+0x42>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f28:	d007      	beq.n	8001f3a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	00010007 	.word	0x00010007

08001f4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e01d      	b.n	8001f9a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f815 	bl	8001fa2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 fb78 	bl	8002680 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	6839      	ldr	r1, [r7, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fed4 	bl	8002d78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a19      	ldr	r2, [pc, #100]	; (800203c <HAL_TIM_PWM_Start+0x84>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_TIM_PWM_Start+0x36>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a18      	ldr	r2, [pc, #96]	; (8002040 <HAL_TIM_PWM_Start+0x88>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_TIM_PWM_Start+0x36>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_TIM_PWM_Start+0x8c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_TIM_PWM_Start+0x3a>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_TIM_PWM_Start+0x3c>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_TIM_PWM_Start+0x90>)
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b06      	cmp	r3, #6
 8002018:	d00b      	beq.n	8002032 <HAL_TIM_PWM_Start+0x7a>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d007      	beq.n	8002032 <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40012c00 	.word	0x40012c00
 8002040:	40014000 	.word	0x40014000
 8002044:	40014400 	.word	0x40014400
 8002048:	00010007 	.word	0x00010007

0800204c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b02      	cmp	r3, #2
 8002060:	d122      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b02      	cmp	r3, #2
 800206e:	d11b      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0202 	mvn.w	r2, #2
 8002078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fad7 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fac9 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fada 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d122      	bne.n	80020fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d11b      	bne.n	80020fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0204 	mvn.w	r2, #4
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2202      	movs	r2, #2
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 faad 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fa9f 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fab0 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b08      	cmp	r3, #8
 8002108:	d122      	bne.n	8002150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b08      	cmp	r3, #8
 8002116:	d11b      	bne.n	8002150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0208 	mvn.w	r2, #8
 8002120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2204      	movs	r2, #4
 8002126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fa83 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fa75 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fa86 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b10      	cmp	r3, #16
 800215c:	d122      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b10      	cmp	r3, #16
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0210 	mvn.w	r2, #16
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2208      	movs	r2, #8
 800217a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fa59 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fa4b 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fa5c 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10e      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d107      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0201 	mvn.w	r2, #1
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f001 fdd6 	bl	8003d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	2b80      	cmp	r3, #128	; 0x80
 80021dc:	d10e      	bne.n	80021fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d107      	bne.n	80021fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fecc 	bl	8002f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220a:	d10e      	bne.n	800222a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b80      	cmp	r3, #128	; 0x80
 8002218:	d107      	bne.n	800222a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 febf 	bl	8002fa8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	d10e      	bne.n	8002256 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	2b40      	cmp	r3, #64	; 0x40
 8002244:	d107      	bne.n	8002256 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800224e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fa0a 	bl	800266a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	2b20      	cmp	r3, #32
 8002262:	d10e      	bne.n	8002282 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b20      	cmp	r3, #32
 8002270:	d107      	bne.n	8002282 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f06f 0220 	mvn.w	r2, #32
 800227a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fe7f 	bl	8002f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e105      	b.n	80024b2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2202      	movs	r2, #2
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b14      	cmp	r3, #20
 80022ba:	f200 80f0 	bhi.w	800249e <HAL_TIM_PWM_ConfigChannel+0x212>
 80022be:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80022c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c4:	08002319 	.word	0x08002319
 80022c8:	0800249f 	.word	0x0800249f
 80022cc:	0800249f 	.word	0x0800249f
 80022d0:	0800249f 	.word	0x0800249f
 80022d4:	08002359 	.word	0x08002359
 80022d8:	0800249f 	.word	0x0800249f
 80022dc:	0800249f 	.word	0x0800249f
 80022e0:	0800249f 	.word	0x0800249f
 80022e4:	0800239b 	.word	0x0800239b
 80022e8:	0800249f 	.word	0x0800249f
 80022ec:	0800249f 	.word	0x0800249f
 80022f0:	0800249f 	.word	0x0800249f
 80022f4:	080023db 	.word	0x080023db
 80022f8:	0800249f 	.word	0x0800249f
 80022fc:	0800249f 	.word	0x0800249f
 8002300:	0800249f 	.word	0x0800249f
 8002304:	0800241d 	.word	0x0800241d
 8002308:	0800249f 	.word	0x0800249f
 800230c:	0800249f 	.word	0x0800249f
 8002310:	0800249f 	.word	0x0800249f
 8002314:	0800245d 	.word	0x0800245d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fa12 	bl	8002748 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0208 	orr.w	r2, r2, #8
 8002332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0204 	bic.w	r2, r2, #4
 8002342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6999      	ldr	r1, [r3, #24]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	619a      	str	r2, [r3, #24]
      break;
 8002356:	e0a3      	b.n	80024a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fa6e 	bl	8002840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6999      	ldr	r1, [r3, #24]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	021a      	lsls	r2, r3, #8
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	619a      	str	r2, [r3, #24]
      break;
 8002398:	e082      	b.n	80024a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fac7 	bl	8002934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0208 	orr.w	r2, r2, #8
 80023b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0204 	bic.w	r2, r2, #4
 80023c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69d9      	ldr	r1, [r3, #28]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	61da      	str	r2, [r3, #28]
      break;
 80023d8:	e062      	b.n	80024a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fb1f 	bl	8002a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69d9      	ldr	r1, [r3, #28]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	021a      	lsls	r2, r3, #8
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	61da      	str	r2, [r3, #28]
      break;
 800241a:	e041      	b.n	80024a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fb5c 	bl	8002ae0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0208 	orr.w	r2, r2, #8
 8002436:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0204 	bic.w	r2, r2, #4
 8002446:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800245a:	e021      	b.n	80024a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fb94 	bl	8002b90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002476:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	021a      	lsls	r2, r3, #8
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800249c:	e000      	b.n	80024a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800249e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop

080024bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_TIM_ConfigClockSource+0x18>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0a8      	b.n	8002626 <HAL_TIM_ConfigClockSource+0x16a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d067      	beq.n	80025e0 <HAL_TIM_ConfigClockSource+0x124>
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d80b      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x70>
 8002514:	2b10      	cmp	r3, #16
 8002516:	d073      	beq.n	8002600 <HAL_TIM_ConfigClockSource+0x144>
 8002518:	2b10      	cmp	r3, #16
 800251a:	d802      	bhi.n	8002522 <HAL_TIM_ConfigClockSource+0x66>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d06f      	beq.n	8002600 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002520:	e078      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002522:	2b20      	cmp	r3, #32
 8002524:	d06c      	beq.n	8002600 <HAL_TIM_ConfigClockSource+0x144>
 8002526:	2b30      	cmp	r3, #48	; 0x30
 8002528:	d06a      	beq.n	8002600 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800252a:	e073      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800252c:	2b70      	cmp	r3, #112	; 0x70
 800252e:	d00d      	beq.n	800254c <HAL_TIM_ConfigClockSource+0x90>
 8002530:	2b70      	cmp	r3, #112	; 0x70
 8002532:	d804      	bhi.n	800253e <HAL_TIM_ConfigClockSource+0x82>
 8002534:	2b50      	cmp	r3, #80	; 0x50
 8002536:	d033      	beq.n	80025a0 <HAL_TIM_ConfigClockSource+0xe4>
 8002538:	2b60      	cmp	r3, #96	; 0x60
 800253a:	d041      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800253c:	e06a      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002542:	d066      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x156>
 8002544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002548:	d017      	beq.n	800257a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800254a:	e063      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f000 fbec 	bl	8002d38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800256e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	609a      	str	r2, [r3, #8]
      break;
 8002578:	e04c      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6899      	ldr	r1, [r3, #8]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f000 fbd5 	bl	8002d38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800259c:	609a      	str	r2, [r3, #8]
      break;
 800259e:	e039      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	461a      	mov	r2, r3
 80025ae:	f000 fb49 	bl	8002c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2150      	movs	r1, #80	; 0x50
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fba2 	bl	8002d02 <TIM_ITRx_SetConfig>
      break;
 80025be:	e029      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	461a      	mov	r2, r3
 80025ce:	f000 fb68 	bl	8002ca2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2160      	movs	r1, #96	; 0x60
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fb92 	bl	8002d02 <TIM_ITRx_SetConfig>
      break;
 80025de:	e019      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	461a      	mov	r2, r3
 80025ee:	f000 fb29 	bl	8002c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2140      	movs	r1, #64	; 0x40
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fb82 	bl	8002d02 <TIM_ITRx_SetConfig>
      break;
 80025fe:	e009      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f000 fb79 	bl	8002d02 <TIM_ITRx_SetConfig>
      break;
 8002610:	e000      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a2a      	ldr	r2, [pc, #168]	; (800273c <TIM_Base_SetConfig+0xbc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d003      	beq.n	80026a0 <TIM_Base_SetConfig+0x20>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269e:	d108      	bne.n	80026b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a21      	ldr	r2, [pc, #132]	; (800273c <TIM_Base_SetConfig+0xbc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00b      	beq.n	80026d2 <TIM_Base_SetConfig+0x52>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c0:	d007      	beq.n	80026d2 <TIM_Base_SetConfig+0x52>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a1e      	ldr	r2, [pc, #120]	; (8002740 <TIM_Base_SetConfig+0xc0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d003      	beq.n	80026d2 <TIM_Base_SetConfig+0x52>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <TIM_Base_SetConfig+0xc4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d108      	bne.n	80026e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a0c      	ldr	r2, [pc, #48]	; (800273c <TIM_Base_SetConfig+0xbc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d007      	beq.n	8002720 <TIM_Base_SetConfig+0xa0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <TIM_Base_SetConfig+0xc0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d003      	beq.n	8002720 <TIM_Base_SetConfig+0xa0>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <TIM_Base_SetConfig+0xc4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d103      	bne.n	8002728 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	615a      	str	r2, [r3, #20]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40014000 	.word	0x40014000
 8002744:	40014400 	.word	0x40014400

08002748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f023 0201 	bic.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0303 	bic.w	r3, r3, #3
 8002782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f023 0302 	bic.w	r3, r3, #2
 8002794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a24      	ldr	r2, [pc, #144]	; (8002834 <TIM_OC1_SetConfig+0xec>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <TIM_OC1_SetConfig+0x70>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a23      	ldr	r2, [pc, #140]	; (8002838 <TIM_OC1_SetConfig+0xf0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_OC1_SetConfig+0x70>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a22      	ldr	r2, [pc, #136]	; (800283c <TIM_OC1_SetConfig+0xf4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d10c      	bne.n	80027d2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f023 0308 	bic.w	r3, r3, #8
 80027be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a17      	ldr	r2, [pc, #92]	; (8002834 <TIM_OC1_SetConfig+0xec>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <TIM_OC1_SetConfig+0xa2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a16      	ldr	r2, [pc, #88]	; (8002838 <TIM_OC1_SetConfig+0xf0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d003      	beq.n	80027ea <TIM_OC1_SetConfig+0xa2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a15      	ldr	r2, [pc, #84]	; (800283c <TIM_OC1_SetConfig+0xf4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d111      	bne.n	800280e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	621a      	str	r2, [r3, #32]
}
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40014000 	.word	0x40014000
 800283c:	40014400 	.word	0x40014400

08002840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0210 	bic.w	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f023 0320 	bic.w	r3, r3, #32
 800288e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a22      	ldr	r2, [pc, #136]	; (8002928 <TIM_OC2_SetConfig+0xe8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d10d      	bne.n	80028c0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a19      	ldr	r2, [pc, #100]	; (8002928 <TIM_OC2_SetConfig+0xe8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <TIM_OC2_SetConfig+0x98>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a18      	ldr	r2, [pc, #96]	; (800292c <TIM_OC2_SetConfig+0xec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_OC2_SetConfig+0x98>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a17      	ldr	r2, [pc, #92]	; (8002930 <TIM_OC2_SetConfig+0xf0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d113      	bne.n	8002900 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	621a      	str	r2, [r3, #32]
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40014000 	.word	0x40014000
 8002930:	40014400 	.word	0x40014400

08002934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <TIM_OC3_SetConfig+0xe4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10d      	bne.n	80029b2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800299c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <TIM_OC3_SetConfig+0xe4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <TIM_OC3_SetConfig+0x96>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <TIM_OC3_SetConfig+0xe8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_OC3_SetConfig+0x96>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <TIM_OC3_SetConfig+0xec>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d113      	bne.n	80029f2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	621a      	str	r2, [r3, #32]
}
 8002a0c:	bf00      	nop
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40014400 	.word	0x40014400

08002a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	031b      	lsls	r3, r3, #12
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <TIM_OC4_SetConfig+0xb0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d007      	beq.n	8002a98 <TIM_OC4_SetConfig+0x74>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a13      	ldr	r2, [pc, #76]	; (8002ad8 <TIM_OC4_SetConfig+0xb4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d003      	beq.n	8002a98 <TIM_OC4_SetConfig+0x74>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a12      	ldr	r2, [pc, #72]	; (8002adc <TIM_OC4_SetConfig+0xb8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d109      	bne.n	8002aac <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	019b      	lsls	r3, r3, #6
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40014400 	.word	0x40014400

08002ae0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002b24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	041b      	lsls	r3, r3, #16
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <TIM_OC5_SetConfig+0xa4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <TIM_OC5_SetConfig+0x6a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <TIM_OC5_SetConfig+0xa8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d003      	beq.n	8002b4a <TIM_OC5_SetConfig+0x6a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <TIM_OC5_SetConfig+0xac>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d109      	bne.n	8002b5e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	621a      	str	r2, [r3, #32]
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40014000 	.word	0x40014000
 8002b8c:	40014400 	.word	0x40014400

08002b90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	051b      	lsls	r3, r3, #20
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <TIM_OC6_SetConfig+0xa8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d007      	beq.n	8002bfc <TIM_OC6_SetConfig+0x6c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <TIM_OC6_SetConfig+0xac>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d003      	beq.n	8002bfc <TIM_OC6_SetConfig+0x6c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <TIM_OC6_SetConfig+0xb0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d109      	bne.n	8002c10 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	029b      	lsls	r3, r3, #10
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	621a      	str	r2, [r3, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40014400 	.word	0x40014400

08002c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f023 0201 	bic.w	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f023 030a 	bic.w	r3, r3, #10
 8002c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	621a      	str	r2, [r3, #32]
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b087      	sub	sp, #28
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f023 0210 	bic.w	r2, r3, #16
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	031b      	lsls	r3, r3, #12
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	621a      	str	r2, [r3, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f043 0307 	orr.w	r3, r3, #7
 8002d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	609a      	str	r2, [r3, #8]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	021a      	lsls	r2, r3, #8
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	609a      	str	r2, [r3, #8]
}
 8002d6c:	bf00      	nop
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1a      	ldr	r2, [r3, #32]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1a      	ldr	r2, [r3, #32]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	fa01 f303 	lsl.w	r3, r1, r3
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	621a      	str	r2, [r3, #32]
}
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e04f      	b.n	8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d108      	bne.n	8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d009      	beq.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e44:	d004      	beq.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a10      	ldr	r2, [pc, #64]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d10c      	bne.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	40014000 	.word	0x40014000

08002e90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e060      	b.n	8002f6e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	041b      	lsls	r3, r3, #16
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d115      	bne.n	8002f5c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	051b      	lsls	r3, r3, #20
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40012c00 	.word	0x40012c00

08002f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e040      	b.n	8003050 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 ffa6 	bl	8003f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f82c 	bl	8003058 <UART_SetConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e022      	b.n	8003050 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fb06 	bl	8003624 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fb8d 	bl	8003768 <UART_CheckIdleState>
 800304e:	4603      	mov	r3, r0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003058:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800305c:	b08a      	sub	sp, #40	; 0x28
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	4313      	orrs	r3, r2
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4bb3      	ldr	r3, [pc, #716]	; (800335c <UART_SetConfig+0x304>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003096:	430b      	orrs	r3, r1
 8003098:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4aa9      	ldr	r2, [pc, #676]	; (8003360 <UART_SetConfig+0x308>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c6:	4313      	orrs	r3, r2
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4aa0      	ldr	r2, [pc, #640]	; (8003364 <UART_SetConfig+0x30c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d126      	bne.n	8003136 <UART_SetConfig+0xde>
 80030e8:	4b9f      	ldr	r3, [pc, #636]	; (8003368 <UART_SetConfig+0x310>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d81a      	bhi.n	800312c <UART_SetConfig+0xd4>
 80030f6:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <UART_SetConfig+0xa4>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	0800311d 	.word	0x0800311d
 8003104:	08003115 	.word	0x08003115
 8003108:	08003125 	.word	0x08003125
 800310c:	2301      	movs	r3, #1
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003112:	e080      	b.n	8003216 <UART_SetConfig+0x1be>
 8003114:	2302      	movs	r3, #2
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311a:	e07c      	b.n	8003216 <UART_SetConfig+0x1be>
 800311c:	2304      	movs	r3, #4
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003122:	e078      	b.n	8003216 <UART_SetConfig+0x1be>
 8003124:	2308      	movs	r3, #8
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312a:	e074      	b.n	8003216 <UART_SetConfig+0x1be>
 800312c:	2310      	movs	r3, #16
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003132:	bf00      	nop
 8003134:	e06f      	b.n	8003216 <UART_SetConfig+0x1be>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a8c      	ldr	r2, [pc, #560]	; (800336c <UART_SetConfig+0x314>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d138      	bne.n	80031b2 <UART_SetConfig+0x15a>
 8003140:	4b89      	ldr	r3, [pc, #548]	; (8003368 <UART_SetConfig+0x310>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b0c      	cmp	r3, #12
 800314c:	d82c      	bhi.n	80031a8 <UART_SetConfig+0x150>
 800314e:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <UART_SetConfig+0xfc>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	08003189 	.word	0x08003189
 8003158:	080031a9 	.word	0x080031a9
 800315c:	080031a9 	.word	0x080031a9
 8003160:	080031a9 	.word	0x080031a9
 8003164:	08003199 	.word	0x08003199
 8003168:	080031a9 	.word	0x080031a9
 800316c:	080031a9 	.word	0x080031a9
 8003170:	080031a9 	.word	0x080031a9
 8003174:	08003191 	.word	0x08003191
 8003178:	080031a9 	.word	0x080031a9
 800317c:	080031a9 	.word	0x080031a9
 8003180:	080031a9 	.word	0x080031a9
 8003184:	080031a1 	.word	0x080031a1
 8003188:	2300      	movs	r3, #0
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e042      	b.n	8003216 <UART_SetConfig+0x1be>
 8003190:	2302      	movs	r3, #2
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e03e      	b.n	8003216 <UART_SetConfig+0x1be>
 8003198:	2304      	movs	r3, #4
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319e:	e03a      	b.n	8003216 <UART_SetConfig+0x1be>
 80031a0:	2308      	movs	r3, #8
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a6:	e036      	b.n	8003216 <UART_SetConfig+0x1be>
 80031a8:	2310      	movs	r3, #16
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ae:	bf00      	nop
 80031b0:	e031      	b.n	8003216 <UART_SetConfig+0x1be>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6a      	ldr	r2, [pc, #424]	; (8003360 <UART_SetConfig+0x308>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d129      	bne.n	8003210 <UART_SetConfig+0x1b8>
 80031bc:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <UART_SetConfig+0x310>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ca:	d014      	beq.n	80031f6 <UART_SetConfig+0x19e>
 80031cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d0:	d802      	bhi.n	80031d8 <UART_SetConfig+0x180>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <UART_SetConfig+0x18e>
 80031d6:	e016      	b.n	8003206 <UART_SetConfig+0x1ae>
 80031d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031dc:	d007      	beq.n	80031ee <UART_SetConfig+0x196>
 80031de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031e2:	d00c      	beq.n	80031fe <UART_SetConfig+0x1a6>
 80031e4:	e00f      	b.n	8003206 <UART_SetConfig+0x1ae>
 80031e6:	2300      	movs	r3, #0
 80031e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ec:	e013      	b.n	8003216 <UART_SetConfig+0x1be>
 80031ee:	2302      	movs	r3, #2
 80031f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f4:	e00f      	b.n	8003216 <UART_SetConfig+0x1be>
 80031f6:	2304      	movs	r3, #4
 80031f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fc:	e00b      	b.n	8003216 <UART_SetConfig+0x1be>
 80031fe:	2308      	movs	r3, #8
 8003200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003204:	e007      	b.n	8003216 <UART_SetConfig+0x1be>
 8003206:	2310      	movs	r3, #16
 8003208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320c:	bf00      	nop
 800320e:	e002      	b.n	8003216 <UART_SetConfig+0x1be>
 8003210:	2310      	movs	r3, #16
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a51      	ldr	r2, [pc, #324]	; (8003360 <UART_SetConfig+0x308>)
 800321c:	4293      	cmp	r3, r2
 800321e:	f040 80fa 	bne.w	8003416 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003226:	2b08      	cmp	r3, #8
 8003228:	d823      	bhi.n	8003272 <UART_SetConfig+0x21a>
 800322a:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <UART_SetConfig+0x1d8>)
 800322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003230:	08003255 	.word	0x08003255
 8003234:	08003273 	.word	0x08003273
 8003238:	0800325d 	.word	0x0800325d
 800323c:	08003273 	.word	0x08003273
 8003240:	08003263 	.word	0x08003263
 8003244:	08003273 	.word	0x08003273
 8003248:	08003273 	.word	0x08003273
 800324c:	08003273 	.word	0x08003273
 8003250:	0800326b 	.word	0x0800326b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003254:	f7fe fa7c 	bl	8001750 <HAL_RCC_GetPCLK1Freq>
 8003258:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800325a:	e00d      	b.n	8003278 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800325c:	4b44      	ldr	r3, [pc, #272]	; (8003370 <UART_SetConfig+0x318>)
 800325e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003260:	e00a      	b.n	8003278 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003262:	f7fe f9df 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 8003266:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003268:	e006      	b.n	8003278 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800326a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003270:	e002      	b.n	8003278 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	76fb      	strb	r3, [r7, #27]
        break;
 8003276:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 81c6 	beq.w	800360c <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	429a      	cmp	r2, r3
 800328e:	d305      	bcc.n	800329c <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	429a      	cmp	r2, r3
 800329a:	d902      	bls.n	80032a2 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	76fb      	strb	r3, [r7, #27]
 80032a0:	e1b4      	b.n	800360c <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 80032a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	f200 80a2 	bhi.w	80033f0 <UART_SetConfig+0x398>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <UART_SetConfig+0x25c>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032d9 	.word	0x080032d9
 80032b8:	080033f1 	.word	0x080033f1
 80032bc:	08003327 	.word	0x08003327
 80032c0:	080033f1 	.word	0x080033f1
 80032c4:	08003379 	.word	0x08003379
 80032c8:	080033f1 	.word	0x080033f1
 80032cc:	080033f1 	.word	0x080033f1
 80032d0:	080033f1 	.word	0x080033f1
 80032d4:	080033c7 	.word	0x080033c7
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80032d8:	f7fe fa3a 	bl	8001750 <HAL_RCC_GetPCLK1Freq>
 80032dc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4619      	mov	r1, r3
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	f04f 0400 	mov.w	r4, #0
 80032ee:	0214      	lsls	r4, r2, #8
 80032f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80032f4:	020b      	lsls	r3, r1, #8
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6852      	ldr	r2, [r2, #4]
 80032fa:	0852      	lsrs	r2, r2, #1
 80032fc:	4611      	mov	r1, r2
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	eb13 0b01 	adds.w	fp, r3, r1
 8003306:	eb44 0c02 	adc.w	ip, r4, r2
 800330a:	4658      	mov	r0, fp
 800330c:	4661      	mov	r1, ip
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f04f 0400 	mov.w	r4, #0
 8003316:	461a      	mov	r2, r3
 8003318:	4623      	mov	r3, r4
 800331a:	f7fc ff57 	bl	80001cc <__aeabi_uldivmod>
 800331e:	4603      	mov	r3, r0
 8003320:	460c      	mov	r4, r1
 8003322:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003324:	e067      	b.n	80033f6 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	4910      	ldr	r1, [pc, #64]	; (8003374 <UART_SetConfig+0x31c>)
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	eb13 0b01 	adds.w	fp, r3, r1
 800333a:	eb44 0c02 	adc.w	ip, r4, r2
 800333e:	4658      	mov	r0, fp
 8003340:	4661      	mov	r1, ip
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f04f 0400 	mov.w	r4, #0
 800334a:	461a      	mov	r2, r3
 800334c:	4623      	mov	r3, r4
 800334e:	f7fc ff3d 	bl	80001cc <__aeabi_uldivmod>
 8003352:	4603      	mov	r3, r0
 8003354:	460c      	mov	r4, r1
 8003356:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003358:	e04d      	b.n	80033f6 <UART_SetConfig+0x39e>
 800335a:	bf00      	nop
 800335c:	efff69f3 	.word	0xefff69f3
 8003360:	40008000 	.word	0x40008000
 8003364:	40013800 	.word	0x40013800
 8003368:	40021000 	.word	0x40021000
 800336c:	40004400 	.word	0x40004400
 8003370:	00f42400 	.word	0x00f42400
 8003374:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003378:	f7fe f954 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 800337c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4619      	mov	r1, r3
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	0214      	lsls	r4, r2, #8
 8003390:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003394:	020b      	lsls	r3, r1, #8
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6852      	ldr	r2, [r2, #4]
 800339a:	0852      	lsrs	r2, r2, #1
 800339c:	4611      	mov	r1, r2
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	eb13 0b01 	adds.w	fp, r3, r1
 80033a6:	eb44 0c02 	adc.w	ip, r4, r2
 80033aa:	4658      	mov	r0, fp
 80033ac:	4661      	mov	r1, ip
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f04f 0400 	mov.w	r4, #0
 80033b6:	461a      	mov	r2, r3
 80033b8:	4623      	mov	r3, r4
 80033ba:	f7fc ff07 	bl	80001cc <__aeabi_uldivmod>
 80033be:	4603      	mov	r3, r0
 80033c0:	460c      	mov	r4, r1
 80033c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80033c4:	e017      	b.n	80033f6 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	f04f 0400 	mov.w	r4, #0
 80033d0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80033d4:	f144 0100 	adc.w	r1, r4, #0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f04f 0400 	mov.w	r4, #0
 80033e0:	461a      	mov	r2, r3
 80033e2:	4623      	mov	r3, r4
 80033e4:	f7fc fef2 	bl	80001cc <__aeabi_uldivmod>
 80033e8:	4603      	mov	r3, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80033ee:	e002      	b.n	80033f6 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	76fb      	strb	r3, [r7, #27]
            break;
 80033f4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fc:	d308      	bcc.n	8003410 <UART_SetConfig+0x3b8>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003404:	d204      	bcs.n	8003410 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	e0fd      	b.n	800360c <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	76fb      	strb	r3, [r7, #27]
 8003414:	e0fa      	b.n	800360c <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341e:	f040 8083 	bne.w	8003528 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8003422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003426:	2b08      	cmp	r3, #8
 8003428:	d85e      	bhi.n	80034e8 <UART_SetConfig+0x490>
 800342a:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <UART_SetConfig+0x3d8>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003455 	.word	0x08003455
 8003434:	08003475 	.word	0x08003475
 8003438:	08003495 	.word	0x08003495
 800343c:	080034e9 	.word	0x080034e9
 8003440:	080034b1 	.word	0x080034b1
 8003444:	080034e9 	.word	0x080034e9
 8003448:	080034e9 	.word	0x080034e9
 800344c:	080034e9 	.word	0x080034e9
 8003450:	080034d1 	.word	0x080034d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003454:	f7fe f97c 	bl	8001750 <HAL_RCC_GetPCLK1Freq>
 8003458:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	005a      	lsls	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	441a      	add	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	fbb2 f3f3 	udiv	r3, r2, r3
 800346e:	b29b      	uxth	r3, r3
 8003470:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003472:	e03c      	b.n	80034ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003474:	f7fe f982 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8003478:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	005a      	lsls	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	441a      	add	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	b29b      	uxth	r3, r3
 8003490:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003492:	e02c      	b.n	80034ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800349e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6852      	ldr	r2, [r2, #4]
 80034a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034ae:	e01e      	b.n	80034ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b0:	f7fe f8b8 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80034b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	005a      	lsls	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034ce:	e00e      	b.n	80034ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034e6:	e002      	b.n	80034ee <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	76fb      	strb	r3, [r7, #27]
        break;
 80034ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d916      	bls.n	8003522 <UART_SetConfig+0x4ca>
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fa:	d212      	bcs.n	8003522 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f023 030f 	bic.w	r3, r3, #15
 8003504:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	b29b      	uxth	r3, r3
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	b29a      	uxth	r2, r3
 8003512:	89fb      	ldrh	r3, [r7, #14]
 8003514:	4313      	orrs	r3, r2
 8003516:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	89fa      	ldrh	r2, [r7, #14]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	e074      	b.n	800360c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	76fb      	strb	r3, [r7, #27]
 8003526:	e071      	b.n	800360c <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8003528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800352c:	2b08      	cmp	r3, #8
 800352e:	d85c      	bhi.n	80035ea <UART_SetConfig+0x592>
 8003530:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <UART_SetConfig+0x4e0>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	0800355d 	.word	0x0800355d
 800353c:	0800357b 	.word	0x0800357b
 8003540:	08003599 	.word	0x08003599
 8003544:	080035eb 	.word	0x080035eb
 8003548:	080035b5 	.word	0x080035b5
 800354c:	080035eb 	.word	0x080035eb
 8003550:	080035eb 	.word	0x080035eb
 8003554:	080035eb 	.word	0x080035eb
 8003558:	080035d3 	.word	0x080035d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800355c:	f7fe f8f8 	bl	8001750 <HAL_RCC_GetPCLK1Freq>
 8003560:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	085a      	lsrs	r2, r3, #1
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	441a      	add	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	b29b      	uxth	r3, r3
 8003576:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003578:	e03a      	b.n	80035f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800357a:	f7fe f8ff 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 800357e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	085a      	lsrs	r2, r3, #1
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	441a      	add	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	b29b      	uxth	r3, r3
 8003594:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003596:	e02b      	b.n	80035f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80035a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6852      	ldr	r2, [r2, #4]
 80035aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035b2:	e01d      	b.n	80035f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b4:	f7fe f836 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80035b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	085a      	lsrs	r2, r3, #1
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	441a      	add	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035d0:	e00e      	b.n	80035f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035e8:	e002      	b.n	80035f0 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	76fb      	strb	r3, [r7, #27]
        break;
 80035ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	d908      	bls.n	8003608 <UART_SetConfig+0x5b0>
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fc:	d204      	bcs.n	8003608 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	e001      	b.n	800360c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003618:	7efb      	ldrb	r3, [r7, #27]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3728      	adds	r7, #40	; 0x28
 800361e:	46bd      	mov	sp, r7
 8003620:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01a      	beq.n	800373a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003722:	d10a      	bne.n	800373a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
  }
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af02      	add	r7, sp, #8
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003776:	f7fc ff0d 	bl	8000594 <HAL_GetTick>
 800377a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b08      	cmp	r3, #8
 8003788:	d10e      	bne.n	80037a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800378a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f82a 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e020      	b.n	80037ea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d10e      	bne.n	80037d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f814 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e00a      	b.n	80037ea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	e05d      	b.n	80038c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d059      	beq.n	80038c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fc fec2 	bl	8000594 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <UART_WaitOnFlagUntilTimeout+0x30>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11b      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003830:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e042      	b.n	80038e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d02b      	beq.n	80038c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003876:	d123      	bne.n	80038c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003880:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003890:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e00f      	b.n	80038e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4013      	ands	r3, r2
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d092      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80038ec:	f7fc fdee 	bl	80004cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038f0:	f000 f810 	bl	8003914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038f4:	f000 f9b0 	bl	8003c58 <MX_GPIO_Init>
  MX_TIM2_Init();
 80038f8:	f000 f88e 	bl	8003a18 <MX_TIM2_Init>
  MX_TIM15_Init();
 80038fc:	f000 f8da 	bl	8003ab4 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8003900:	f000 f97a 	bl	8003bf8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8003904:	2104      	movs	r1, #4
 8003906:	4802      	ldr	r0, [pc, #8]	; (8003910 <main+0x28>)
 8003908:	f7fe fb56 	bl	8001fb8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800390c:	e7fe      	b.n	800390c <main+0x24>
 800390e:	bf00      	nop
 8003910:	20000030 	.word	0x20000030

08003914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b0ac      	sub	sp, #176	; 0xb0
 8003918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800391a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800391e:	2244      	movs	r2, #68	; 0x44
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fc1c 	bl	8004160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003928:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	2254      	movs	r2, #84	; 0x54
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fc0e 	bl	8004160 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003944:	f7fd f8f8 	bl	8000b38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <SystemClock_Config+0x100>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	4a31      	ldr	r2, [pc, #196]	; (8003a14 <SystemClock_Config+0x100>)
 8003950:	f023 0318 	bic.w	r3, r3, #24
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003958:	2314      	movs	r3, #20
 800395a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800395c:	2301      	movs	r3, #1
 800395e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003960:	2301      	movs	r3, #1
 8003962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800396c:	2360      	movs	r3, #96	; 0x60
 800396e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003972:	2302      	movs	r3, #2
 8003974:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003978:	2301      	movs	r3, #1
 800397a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800397e:	2301      	movs	r3, #1
 8003980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003984:	2310      	movs	r3, #16
 8003986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800398a:	2307      	movs	r3, #7
 800398c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003990:	2302      	movs	r3, #2
 8003992:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003996:	2302      	movs	r3, #2
 8003998:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800399c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fd f93d 	bl	8000c20 <HAL_RCC_OscConfig>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80039ac:	f000 fa26 	bl	8003dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039b0:	230f      	movs	r3, #15
 80039b2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039b4:	2303      	movs	r3, #3
 80039b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039b8:	2300      	movs	r3, #0
 80039ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039bc:	2300      	movs	r3, #0
 80039be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039c0:	2300      	movs	r3, #0
 80039c2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80039c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd fd48 	bl	8001460 <HAL_RCC_ClockConfig>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80039d6:	f000 fa11 	bl	8003dfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80039da:	2302      	movs	r3, #2
 80039dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039de:	2300      	movs	r3, #0
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039e2:	1d3b      	adds	r3, r7, #4
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd ff3f 	bl	8001868 <HAL_RCCEx_PeriphCLKConfig>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80039f0:	f000 fa04 	bl	8003dfc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80039f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039f8:	f7fd f8bc 	bl	8000b74 <HAL_PWREx_ControlVoltageScaling>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003a02:	f000 f9fb 	bl	8003dfc <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003a06:	f7fe f921 	bl	8001c4c <HAL_RCCEx_EnableMSIPLLMode>
}
 8003a0a:	bf00      	nop
 8003a0c:	37b0      	adds	r7, #176	; 0xb0
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000

08003a18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a1e:	f107 0310 	add.w	r3, r7, #16
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	605a      	str	r2, [r3, #4]
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a36:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <MX_TIM2_Init+0x98>)
 8003a38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800 - 1;
 8003a3e:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <MX_TIM2_Init+0x98>)
 8003a40:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8003a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a46:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <MX_TIM2_Init+0x98>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8003a4c:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <MX_TIM2_Init+0x98>)
 8003a4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <MX_TIM2_Init+0x98>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <MX_TIM2_Init+0x98>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a60:	4813      	ldr	r0, [pc, #76]	; (8003ab0 <MX_TIM2_Init+0x98>)
 8003a62:	f7fe f9f3 	bl	8001e4c <HAL_TIM_Base_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003a6c:	f000 f9c6 	bl	8003dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a76:	f107 0310 	add.w	r3, r7, #16
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <MX_TIM2_Init+0x98>)
 8003a7e:	f7fe fd1d 	bl	80024bc <HAL_TIM_ConfigClockSource>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003a88:	f000 f9b8 	bl	8003dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a94:	1d3b      	adds	r3, r7, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	4805      	ldr	r0, [pc, #20]	; (8003ab0 <MX_TIM2_Init+0x98>)
 8003a9a:	f7ff f993 	bl	8002dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003aa4:	f000 f9aa 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003aa8:	bf00      	nop
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000070 	.word	0x20000070

08003ab4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b09a      	sub	sp, #104	; 0x68
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
 8003ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ad4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	611a      	str	r2, [r3, #16]
 8003ae4:	615a      	str	r2, [r3, #20]
 8003ae6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	222c      	movs	r2, #44	; 0x2c
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fb36 	bl	8004160 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003af4:	4b3e      	ldr	r3, [pc, #248]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003af6:	4a3f      	ldr	r2, [pc, #252]	; (8003bf4 <MX_TIM15_Init+0x140>)
 8003af8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 32000 - 1;
 8003afa:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003afc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8003b00:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 21 - 1;
 8003b08:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003b0a:	2214      	movs	r2, #20
 8003b0c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0e:	4b38      	ldr	r3, [pc, #224]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003b14:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b1a:	4b35      	ldr	r3, [pc, #212]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003b20:	4833      	ldr	r0, [pc, #204]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003b22:	f7fe f993 	bl	8001e4c <HAL_TIM_Base_Init>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003b2c:	f000 f966 	bl	8003dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b34:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003b36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	482c      	ldr	r0, [pc, #176]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003b3e:	f7fe fcbd 	bl	80024bc <HAL_TIM_ConfigClockSource>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8003b48:	f000 f958 	bl	8003dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003b4c:	4828      	ldr	r0, [pc, #160]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003b4e:	f7fe f9fd 	bl	8001f4c <HAL_TIM_PWM_Init>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8003b58:	f000 f950 	bl	8003dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003b64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4821      	ldr	r0, [pc, #132]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003b6c:	f7ff f92a 	bl	8002dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8003b76:	f000 f941 	bl	8003dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b7a:	2360      	movs	r3, #96	; 0x60
 8003b7c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b82:	2300      	movs	r3, #0
 8003b84:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b86:	2300      	movs	r3, #0
 8003b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b92:	2300      	movs	r3, #0
 8003b94:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4814      	ldr	r0, [pc, #80]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003ba0:	f7fe fb74 	bl	800228c <HAL_TIM_PWM_ConfigChannel>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8003baa:	f000 f927 	bl	8003dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bc6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4807      	ldr	r0, [pc, #28]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003bd2:	f7ff f95d 	bl	8002e90 <HAL_TIMEx_ConfigBreakDeadTime>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8003bdc:	f000 f90e 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003be0:	4803      	ldr	r0, [pc, #12]	; (8003bf0 <MX_TIM15_Init+0x13c>)
 8003be2:	f000 f96f 	bl	8003ec4 <HAL_TIM_MspPostInit>

}
 8003be6:	bf00      	nop
 8003be8:	3768      	adds	r7, #104	; 0x68
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000030 	.word	0x20000030
 8003bf4:	40014000 	.word	0x40014000

08003bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bfc:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <MX_USART2_UART_Init+0x58>)
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <MX_USART2_UART_Init+0x5c>)
 8003c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003c02:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <MX_USART2_UART_Init+0x58>)
 8003c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c0a:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <MX_USART2_UART_Init+0x58>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <MX_USART2_UART_Init+0x58>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c16:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <MX_USART2_UART_Init+0x58>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <MX_USART2_UART_Init+0x58>)
 8003c1e:	220c      	movs	r2, #12
 8003c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <MX_USART2_UART_Init+0x58>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <MX_USART2_UART_Init+0x58>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <MX_USART2_UART_Init+0x58>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <MX_USART2_UART_Init+0x58>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c3a:	4805      	ldr	r0, [pc, #20]	; (8003c50 <MX_USART2_UART_Init+0x58>)
 8003c3c:	f7ff f9be 	bl	8002fbc <HAL_UART_Init>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003c46:	f000 f8d9 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200000b0 	.word	0x200000b0
 8003c54:	40004400 	.word	0x40004400

08003c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5e:	f107 030c 	add.w	r3, r7, #12
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6e:	4b33      	ldr	r3, [pc, #204]	; (8003d3c <MX_GPIO_Init+0xe4>)
 8003c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c72:	4a32      	ldr	r2, [pc, #200]	; (8003d3c <MX_GPIO_Init+0xe4>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c7a:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <MX_GPIO_Init+0xe4>)
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c86:	4b2d      	ldr	r3, [pc, #180]	; (8003d3c <MX_GPIO_Init+0xe4>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <MX_GPIO_Init+0xe4>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c92:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <MX_GPIO_Init+0xe4>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	607b      	str	r3, [r7, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c9e:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <MX_GPIO_Init+0xe4>)
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <MX_GPIO_Init+0xe4>)
 8003ca4:	f043 0302 	orr.w	r3, r3, #2
 8003ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <MX_GPIO_Init+0xe4>)
 8003cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	21c0      	movs	r1, #192	; 0xc0
 8003cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cbe:	f7fc fef1 	bl	8000aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2108      	movs	r1, #8
 8003cc6:	481e      	ldr	r0, [pc, #120]	; (8003d40 <MX_GPIO_Init+0xe8>)
 8003cc8:	f7fc feec 	bl	8000aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ccc:	23c0      	movs	r3, #192	; 0xc0
 8003cce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ce6:	f7fc fd73 	bl	80007d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cf0:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <MX_GPIO_Init+0xec>)
 8003cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d02:	f7fc fd65 	bl	80007d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003d06:	2308      	movs	r3, #8
 8003d08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003d16:	f107 030c 	add.w	r3, r7, #12
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4808      	ldr	r0, [pc, #32]	; (8003d40 <MX_GPIO_Init+0xe8>)
 8003d1e:	f7fc fd57 	bl	80007d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003d22:	2200      	movs	r2, #0
 8003d24:	2100      	movs	r1, #0
 8003d26:	2017      	movs	r0, #23
 8003d28:	f7fc fd1b 	bl	8000762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d2c:	2017      	movs	r0, #23
 8003d2e:	f7fc fd34 	bl	800079a <HAL_NVIC_EnableIRQ>

}
 8003d32:	bf00      	nop
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	48000400 	.word	0x48000400
 8003d44:	10110000 	.word	0x10110000

08003d48 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ 	/*The ISR function is called when an interrupt is raised by a GPIO pin
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	80fb      	strh	r3, [r7, #6]
													connected to the sensor or the button. This GPIO pin is PA8. */

__HAL_TIM_SetCompare(&htim15, TIM_CHANNEL_2 ,1);	/*This specific function takes the address of timer 15
 8003d52:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <HAL_GPIO_EXTI_Callback+0x28>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2201      	movs	r2, #1
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
													and the PWM pulse width is set to 1 for timer 15 channel 2 (PA3).
													This lifts the arm up.*/

timer = 0;											//Timer is set to 0. This resets the timer after the arm is raised up for 3 seconds.
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	801a      	strh	r2, [r3, #0]
HAL_TIM_Base_Start_IT(&htim2);}						/*Start timer 2 which raises an interrupt of 150 ms (6.6 Hz). It is set by adjusting the
 8003d60:	4805      	ldr	r0, [pc, #20]	; (8003d78 <HAL_GPIO_EXTI_Callback+0x30>)
 8003d62:	f7fe f8c9 	bl	8001ef8 <HAL_TIM_Base_Start_IT>
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000030 	.word	0x20000030
 8003d74:	2000002c 	.word	0x2000002c
 8003d78:	20000070 	.word	0x20000070

08003d7c <HAL_TIM_PeriodElapsedCallback>:
 	 	 	 	 	 	 	 	 	 	 	 	 	prescaler and ARR values in the configuration table. Therefore, the need of a delay
 	 	 	 	 	 	 	 	 	 	 	 	 	function or any extra lines has been prevented. Setting the period of the singal to
 	 	 	 	 	 	 	 	 	 	 	 	 	150 ms (half-wavelength of 3 Hz) will allow the GREEN Led to blink at rate of 3 Hz.*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ /*When the period of timer 2 elapses, this
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
															 function is called. This happens repeatedly every
															 150 ms until 3 seconds have elapsed.*/

//The GREEN Led turns on and keeps blinking at 3Hz for 3 seconds as timer 2 calls the function every 150 ms.
timer = timer + 150;										//Timer increments by 150 ms.
 8003d84:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3396      	adds	r3, #150	; 0x96
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003d90:	801a      	strh	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);		//The RED Led is off (reset).
 8003d92:	2200      	movs	r2, #0
 8003d94:	2140      	movs	r1, #64	; 0x40
 8003d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d9a:	f7fc fe83 	bl	8000aa4 <HAL_GPIO_WritePin>
HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);						//The GREEN Led is blinking at 3 Hz.
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003da4:	f7fc fe96 	bl	8000ad4 <HAL_GPIO_TogglePin>

if(htim -> Instance == TIM2 && timer == 3000){			//If 3 seconds have elapsed on timer 2,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d119      	bne.n	8003de6 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d112      	bne.n	8003de6 <HAL_TIM_PeriodElapsedCallback+0x6a>
HAL_TIM_Base_Stop(&htim2);								//Stop timer 2.
 8003dc0:	480c      	ldr	r0, [pc, #48]	; (8003df4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003dc2:	f7fe f86e 	bl	8001ea2 <HAL_TIM_Base_Stop>
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);	//Turn the GREEN Led off.
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dce:	f7fc fe69 	bl	8000aa4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);		//Turn the RED Led on.
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	2140      	movs	r1, #64	; 0x40
 8003dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dda:	f7fc fe63 	bl	8000aa4 <HAL_GPIO_WritePin>
__HAL_TIM_SetCompare(&htim15, TIM_CHANNEL_2 ,2);}}		/*This specific function takes the address of timer 15
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2202      	movs	r2, #2
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2000002c 	.word	0x2000002c
 8003df4:	20000070 	.word	0x20000070
 8003df8:	20000030 	.word	0x20000030

08003dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e12:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_MspInit+0x44>)
 8003e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e16:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <HAL_MspInit+0x44>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_MspInit+0x44>)
 8003e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	607b      	str	r3, [r7, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_MspInit+0x44>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	4a08      	ldr	r2, [pc, #32]	; (8003e50 <HAL_MspInit+0x44>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6593      	str	r3, [r2, #88]	; 0x58
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_MspInit+0x44>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000

08003e54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d114      	bne.n	8003e90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	4a14      	ldr	r2, [pc, #80]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6593      	str	r3, [r2, #88]	; 0x58
 8003e72:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	201c      	movs	r0, #28
 8003e84:	f7fc fc6d 	bl	8000762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e88:	201c      	movs	r0, #28
 8003e8a:	f7fc fc86 	bl	800079a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003e8e:	e010      	b.n	8003eb2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <HAL_TIM_Base_MspInit+0x6c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d10b      	bne.n	8003eb2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_TIM_Base_MspInit+0x68>)
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40014000 	.word	0x40014000

08003ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ecc:	f107 030c 	add.w	r3, r7, #12
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <HAL_TIM_MspPostInit+0x64>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d11c      	bne.n	8003f20 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_TIM_MspPostInit+0x68>)
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eea:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <HAL_TIM_MspPostInit+0x68>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_TIM_MspPostInit+0x68>)
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration    
    PA3     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003efe:	2308      	movs	r3, #8
 8003f00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f02:	2302      	movs	r3, #2
 8003f04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003f0e:	230e      	movs	r3, #14
 8003f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	4619      	mov	r1, r3
 8003f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f1c:	f7fc fc58 	bl	80007d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003f20:	bf00      	nop
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40021000 	.word	0x40021000

08003f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	; 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <HAL_UART_MspInit+0xa0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d13a      	bne.n	8003fc8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_UART_MspInit+0xa4>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_UART_MspInit+0xa4>)
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <HAL_UART_MspInit+0xa4>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <HAL_UART_MspInit+0xa4>)
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <HAL_UART_MspInit+0xa4>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <HAL_UART_MspInit+0xa4>)
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003f82:	2304      	movs	r3, #4
 8003f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f86:	2302      	movs	r3, #2
 8003f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f92:	2307      	movs	r3, #7
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fa0:	f7fc fc16 	bl	80007d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003faa:	2302      	movs	r3, #2
 8003fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003fba:	f107 0314 	add.w	r3, r7, #20
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fc4:	f7fc fc04 	bl	80007d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fc8:	bf00      	nop
 8003fca:	3728      	adds	r7, #40	; 0x28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40004400 	.word	0x40004400
 8003fd4:	40021000 	.word	0x40021000

08003fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fea:	e7fe      	b.n	8003fea <HardFault_Handler+0x4>

08003fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ff0:	e7fe      	b.n	8003ff0 <MemManage_Handler+0x4>

08003ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ff6:	e7fe      	b.n	8003ff6 <BusFault_Handler+0x4>

08003ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ffc:	e7fe      	b.n	8003ffc <UsageFault_Handler+0x4>

08003ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800402c:	f7fc faa0 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004030:	bf00      	nop
 8004032:	bd80      	pop	{r7, pc}

08004034 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004038:	f44f 7080 	mov.w	r0, #256	; 0x100
 800403c:	f7fc fd64 	bl	8000b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004040:	bf00      	nop
 8004042:	bd80      	pop	{r7, pc}

08004044 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004048:	4802      	ldr	r0, [pc, #8]	; (8004054 <TIM2_IRQHandler+0x10>)
 800404a:	f7fd ffff 	bl	800204c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000070 	.word	0x20000070

08004058 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800405c:	4b17      	ldr	r3, [pc, #92]	; (80040bc <SystemInit+0x64>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	4a16      	ldr	r2, [pc, #88]	; (80040bc <SystemInit+0x64>)
 8004064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800406c:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <SystemInit+0x68>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <SystemInit+0x68>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <SystemInit+0x68>)
 800407a:	2200      	movs	r2, #0
 800407c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <SystemInit+0x68>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a0f      	ldr	r2, [pc, #60]	; (80040c0 <SystemInit+0x68>)
 8004084:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004088:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800408c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <SystemInit+0x68>)
 8004090:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004094:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <SystemInit+0x68>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <SystemInit+0x68>)
 800409c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80040a2:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <SystemInit+0x68>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <SystemInit+0x64>)
 80040aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040ae:	609a      	str	r2, [r3, #8]
#endif
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	e000ed00 	.word	0xe000ed00
 80040c0:	40021000 	.word	0x40021000

080040c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80040c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80040c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80040ca:	e003      	b.n	80040d4 <LoopCopyDataInit>

080040cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80040ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80040d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80040d2:	3104      	adds	r1, #4

080040d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80040d4:	480b      	ldr	r0, [pc, #44]	; (8004104 <LoopForever+0xa>)
	ldr	r3, =_edata
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <LoopForever+0xe>)
	adds	r2, r0, r1
 80040d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80040da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80040dc:	d3f6      	bcc.n	80040cc <CopyDataInit>
	ldr	r2, =_sbss
 80040de:	4a0b      	ldr	r2, [pc, #44]	; (800410c <LoopForever+0x12>)
	b	LoopFillZerobss
 80040e0:	e002      	b.n	80040e8 <LoopFillZerobss>

080040e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80040e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80040e4:	f842 3b04 	str.w	r3, [r2], #4

080040e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <LoopForever+0x16>)
	cmp	r2, r3
 80040ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80040ec:	d3f9      	bcc.n	80040e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80040ee:	f7ff ffb3 	bl	8004058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040f2:	f000 f811 	bl	8004118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040f6:	f7ff fbf7 	bl	80038e8 <main>

080040fa <LoopForever>:

LoopForever:
    b LoopForever
 80040fa:	e7fe      	b.n	80040fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80040fc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004100:	080041e0 	.word	0x080041e0
	ldr	r0, =_sdata
 8004104:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004108:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800410c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8004110:	20000130 	.word	0x20000130

08004114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004114:	e7fe      	b.n	8004114 <ADC1_IRQHandler>
	...

08004118 <__libc_init_array>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	4e0d      	ldr	r6, [pc, #52]	; (8004150 <__libc_init_array+0x38>)
 800411c:	4c0d      	ldr	r4, [pc, #52]	; (8004154 <__libc_init_array+0x3c>)
 800411e:	1ba4      	subs	r4, r4, r6
 8004120:	10a4      	asrs	r4, r4, #2
 8004122:	2500      	movs	r5, #0
 8004124:	42a5      	cmp	r5, r4
 8004126:	d109      	bne.n	800413c <__libc_init_array+0x24>
 8004128:	4e0b      	ldr	r6, [pc, #44]	; (8004158 <__libc_init_array+0x40>)
 800412a:	4c0c      	ldr	r4, [pc, #48]	; (800415c <__libc_init_array+0x44>)
 800412c:	f000 f820 	bl	8004170 <_init>
 8004130:	1ba4      	subs	r4, r4, r6
 8004132:	10a4      	asrs	r4, r4, #2
 8004134:	2500      	movs	r5, #0
 8004136:	42a5      	cmp	r5, r4
 8004138:	d105      	bne.n	8004146 <__libc_init_array+0x2e>
 800413a:	bd70      	pop	{r4, r5, r6, pc}
 800413c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004140:	4798      	blx	r3
 8004142:	3501      	adds	r5, #1
 8004144:	e7ee      	b.n	8004124 <__libc_init_array+0xc>
 8004146:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800414a:	4798      	blx	r3
 800414c:	3501      	adds	r5, #1
 800414e:	e7f2      	b.n	8004136 <__libc_init_array+0x1e>
 8004150:	080041d8 	.word	0x080041d8
 8004154:	080041d8 	.word	0x080041d8
 8004158:	080041d8 	.word	0x080041d8
 800415c:	080041dc 	.word	0x080041dc

08004160 <memset>:
 8004160:	4402      	add	r2, r0
 8004162:	4603      	mov	r3, r0
 8004164:	4293      	cmp	r3, r2
 8004166:	d100      	bne.n	800416a <memset+0xa>
 8004168:	4770      	bx	lr
 800416a:	f803 1b01 	strb.w	r1, [r3], #1
 800416e:	e7f9      	b.n	8004164 <memset+0x4>

08004170 <_init>:
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	bf00      	nop
 8004174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004176:	bc08      	pop	{r3}
 8004178:	469e      	mov	lr, r3
 800417a:	4770      	bx	lr

0800417c <_fini>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	bf00      	nop
 8004180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004182:	bc08      	pop	{r3}
 8004184:	469e      	mov	lr, r3
 8004186:	4770      	bx	lr
